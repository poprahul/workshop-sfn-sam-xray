---
AWSTemplateFormatVersion: 2010-09-09
Description: AWS Step Functions sample project for combining workflows using the Step Functions StartExecution API service integration in various patterns.
Resources:
  NestingPatternMainStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt [ NestingPatternMainStateMachineExecutionRole, Arn ]
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "An example of combining workflows using a Step Functions StartExecution task state with various integration patterns.",
              "StartAt": "Start new workflow and continue",
              "States": {
                "Start new workflow and continue": {
                  "Comment": "Start an execution of another Step Functions state machine and continue",
                  "Type": "Task",
                  "Resource": "arn:${AWS::Partition}:states:::states:startExecution",
                  "Parameters": {
                    "StateMachineArn": "${NestingPatternAnotherStateMachineArn}",
                    "Input": {
                      "NeedCallback": false,
                      "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
                    }
                  },
                  "Next": "Start in parallel"
                },
                "Start in parallel": {
                  "Comment": "Start two executions of the same state machine in parallel",
                  "Type": "Parallel",
                  "End": true,
                  "Branches": [
                    {
                      "StartAt": "Start new workflow and wait for completion",
                      "States": {
                        "Start new workflow and wait for completion": {
                          "Comment": "Start an execution and wait for its completion",
                          "Type": "Task",
                          "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
                          "Parameters": {
                            "StateMachineArn": "${NestingPatternAnotherStateMachineArn}",
                            "Input": {
                              "NeedCallback": false,
                              "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
                            }
                          },
                          "OutputPath": "$.Output",
                          "End": true
                        }
                      }
                    },
                    {
                      "StartAt": "Start new workflow and wait for callback",
                      "States": {
                        "Start new workflow and wait for callback": {
                          "Comment": "Start an execution and wait for it to call back with a task token",
                          "Type": "Task",
                          "Resource": "arn:${AWS::Partition}:states:::states:startExecution.waitForTaskToken",
                          "Parameters": {
                            "StateMachineArn": "${NestingPatternAnotherStateMachineArn}",
                            "Input": {
                              "NeedCallback": true,
                              "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                              "TaskToken.$": "$$.Task.Token"
                            }
                          },
                          "End": true
                        }
                      }
                    }
                  ]
                }
              }
            }
          - {NestingPatternAnotherStateMachineArn: !Ref NestingPatternAnotherStateMachine}

  NestingPatternMainStateMachineExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "states.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "states:StartExecution"
                  - "states:DescribeExecution"
                  - "states:StopExecution"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "events:PutTargets"
                  - "events:PutRule"
                  - "events:DescribeRule"
                Resource: !Sub "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule"

  NestingPatternAnotherStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt [ NestingPatternAnotherStateMachineExecutionRole, Arn ]
      DefinitionString:
        Fn::Sub: |
          {
            "StartAt": "First long-running job",
            "States": {
              "First long-running job": {
                "Type": "Wait",
                "Seconds": 1,
                "Next": "Need callback?"
              },
              "Need callback?": {
                "Type" : "Choice",
                "Choices": [
                  {
                    "Variable": "$.NeedCallback",
                    "BooleanEquals": true,
                    "Next": "Callback"
                  }
                ],
                "Default": "Second long-running job"
              },
              "Callback": {
                "Type": "Task",
                "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "${NestingPatternCallbackLambdaFunction}",
                  "Payload": {
                    "TaskToken.$": "$$.Execution.Input.TaskToken",
                    "Message": "Callback right after the first long-running job is completed"
                  }
                },
                "Next": "Second long-running job"
              },
              "Second long-running job": {
                "Type": "Wait",
                "Seconds": 1,
                "Next": "Report completion"
              },
              "Report completion": {
                "Type": "Pass",
                "Result": "The whole execution is completed including both long-running jobs",
                "End": true
              }
            }
          }

  NestingPatternAnotherStateMachineExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "states.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt NestingPatternCallbackLambdaFunction.Arn

  NestingPatternCallbackLambdaFunction:
      Type: "AWS::Lambda::Function"
      Properties:
        Handler: "index.lambda_handler"
        Role: !GetAtt "NestingPatternCallbackLambdaFunctionRole.Arn"
        Runtime: "nodejs12.x"
        Timeout: "25"
        Code:
          ZipFile:
            Fn::Sub: |
              console.log('Loading function');
              const AWS = require('aws-sdk');
              exports.lambda_handler = (event, context, callback) => {
                  console.log('event ' + JSON.stringify(event));
                  console.log('context ' + JSON.stringify(context));

                  const taskToken = event.TaskToken;
                  const message = event.Message;

                  const params = {
                      taskToken: taskToken,
                      output: "\"" + message + "\""
                  }

                  const stepfunctions = new AWS.StepFunctions();
                  stepfunctions.sendTaskSuccess(params, function(err, data) {
                      if (err) {
                          console.log("Error", err);
                          callback(null, err)
                      } else {
                          console.log("Success", data);
                          callback(null);
                      }
                  });
              }

  NestingPatternCallbackLambdaFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
        - PolicyName: SendTaskSuccessPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "states:SendTaskSuccess"
                Resource: "*"

Outputs:
  StateMachineArn:
    Value:
      Ref: NestingPatternMainStateMachine
  ExecutionInput:
    Description: Sample input to StartExecution.
    Value:
      >
        {}